%{
    #include<iostream>
    using namespace std;

    int yylex();
    int getLineNumber();
    void yyerror(const char *s);

%}


%token KW_BYTE
%token KW_INT
%token KW_CHAR
%token KW_REAL
%token KW_RETURN
%token KW_DO
%token KW_ELSE
%token KW_IF
%token KW_PRINT
%token KW_READ
%token KW_WHILE

%token TK_IDENTIFIER
%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING

%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF

%token TOKEN_ERROR

%left '+' '-'
%left '*' '/'
%left '='
%left '~'
%left '&' '|'
%nonassoc OPERATOR_EQ OPERATOR_DIF OPERATOR_LE OPERATOR_GE '<' '>'


%%

program: dclr
    ;

dclr : dclrVar dclr
    |    dclrFunc dclr
    |    dclrVec dclr
    |
    ;

type : KW_INT
    |    KW_REAL
    |    KW_BYTE
    |   KW_CHAR
    |
    ;

dclrVar : type TK_IDENTIFIER '=' ltVal ';'
        |
        ;

dclrVec : type TK_IDENTIFIER '[' LIT_INT ']' ';'
        | type TK_IDENTIFIER '[' LIT_INT ']' '=' vecVals ';'

ltVal: LIT_CHAR
    |    LIT_INT
    |   LIT_REAL
    ;

vecVals : ltVal
            | vecVals ',' ltVal
            ;

dclrFunc : type TK_IDENTIFIER '(' param ')' cmndBlck
            ;

param : type someVar someParam
        |
        ;


someVar : TK_IDENTIFIER
        |   TK_IDENTIFIER '[' expression ']'
        ;

someParam : ',' type someVar someParam
        |
        ;

expression: someVar
        |   ltVal
        | expression '+' expression
        | expression '-' expression
        | expression '*' expression
        | expression '/' expression
        | expression '>' expression
        | expression '<' expression
        | expression '&' expression
        | expression '|' expression
        | expression '~' expression
        | '(' expression ')'
        | expression OPERATOR_LE expression
        | expression OPERATOR_GE expression
        | expression OPERATOR_EQ expression
        | expression OPERATOR_DIF expression
        | funcCall
        ;

cmndBlck : '{' cmndSeq '}'
        ;

cmndSeq : cmnd cmndSeq
        |
        ;

cmnd : cmndAtr ';'
    | cmndFlow
    | cmndRead ';'
    | cmndPrint ';'
    | cmndReturn ';'
    | cmndBlck
    | ';'

cmndAtr : someVar '=' expression
        ;

cmndFlow: KW_IF cond cmnd
        | KW_IF cond cmnd KW_ELSE cmnd
        | KW_WHILE wcond KW_DO cmnd
        | KW_DO cmnd KW_WHILE wcond ';'
        ;

wcond : cond
        | expression
        ;

cond : '(' expression ')'

cmndRead : KW_READ someVar
        ;

cmndPrint: KW_PRINT printList
        ;

printArgs : LIT_STRING
        |  expression
        ;

printList : printArgs
        | printArgs printList
        |
        ;

cmndReturn: KW_RETURN expression
        ;

funcCall : TK_IDENTIFIER '(' funcArgs ')'
        ;

funcArgs : expression someArgs
        |
        ;

someArgs : ',' expression someArgs
        |
        ;


%%

void yyerror(const char *s){
    cerr << "syntax error at line: " << getLineNumber() << endl; 
    exit(3); 
}